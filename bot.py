import logging
import sqlite3
import asyncio
import aiohttp
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

CHANNEL_USERNAME = "@wexxi_code"
MAIN_PHOTO_URL = "https://postimg.cc/5jp2NNDX"

# –î–∞–Ω–Ω—ã–µ
CRYPTO_CURRENCIES = {
    "TON": "toncoin", "BTC": "bitcoin", "ETH": "ethereum",
    "BNB": "binancecoin", "SOL": "solana", "ADA": "cardano", "DOGE": "dogecoin"
}

TARGET_CURRENCIES = {
    "RUB": "rub", "USD": "usd", "EUR": "eur", 
    "KZT": "kzt", "UAH": "uah", "BYN": "byn"
}

BINANCE_SYMBOLS = {
    "TON": "TONUSDT", "BTC": "BTCUSDT", "ETH": "ETHUSDT",
    "BNB": "BNBUSDT", "SOL": "SOLUSDT", "ADA": "ADAUSDT", "DOGE": "DOGEUSDT"
}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
price_cache = {}
CACHE_DURATION = timedelta(seconds=30)

class Database:
    def __init__(self):
        self.init_db()
    
    def init_db(self):
        with sqlite3.connect('crypto_bot.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS subscriptions (
                    user_id INTEGER,
                    crypto TEXT,
                    currency TEXT,
                    target_price REAL,
                    is_active INTEGER DEFAULT 1,
                    PRIMARY KEY (user_id, crypto, currency)
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_settings (
                    user_id INTEGER PRIMARY KEY,
                    language TEXT DEFAULT 'ru'
                )
            ''')
            conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_user_language(self, user_id):
        try:
            with sqlite3.connect('crypto_bot.db', check_same_thread=False) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT language FROM user_settings WHERE user_id = ?', (user_id,))
                result = cursor.fetchone()
                return result[0] if result else 'ru'
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
            return 'ru'
    
    def set_user_language(self, user_id, language):
        try:
            with sqlite3.connect('crypto_bot.db', check_same_thread=False) as conn:
                cursor = conn.cursor()
                cursor.execute('INSERT OR REPLACE INTO user_settings (user_id, language) VALUES (?, ?)', 
                             (user_id, language))
                conn.commit()
            logger.info(f"‚úÖ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {user_id} -> {language}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
            return False
    
    def save_subscription(self, user_id, crypto, currency, target_price):
        try:
            with sqlite3.connect('crypto_bot.db', check_same_thread=False) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR REPLACE INTO subscriptions 
                    (user_id, crypto, currency, target_price, is_active) 
                    VALUES (?, ?, ?, ?, 1)
                ''', (user_id, crypto, currency, target_price))
                conn.commit()
            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {user_id}, {crypto}, {currency}, {target_price}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    def get_user_subscriptions(self, user_id):
        try:
            with sqlite3.connect('crypto_bot.db', check_same_thread=False) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT crypto, currency, target_price 
                    FROM subscriptions 
                    WHERE user_id = ? AND is_active = 1
                ''', (user_id,))
                result = cursor.fetchall()
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è {user_id}: {len(result)}")
                return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return []
    
    def stop_all_subscriptions(self, user_id):
        with sqlite3.connect('crypto_bot.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE subscriptions SET is_active = 0 WHERE user_id = ?', (user_id,))
            conn.commit()
    
    def deactivate_subscription(self, user_id, crypto, currency):
        with sqlite3.connect('crypto_bot.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE subscriptions SET is_active = 0 
                WHERE user_id = ? AND crypto = ? AND currency = ?
            ''', (user_id, crypto, currency))
            conn.commit()

class PriceService:
    def __init__(self):
        self.db = Database()
    
    async def get_usd_to_rub_rate(self):
        cache_key = "usd_rub"
        if self._is_cache_valid(cache_key):
            return price_cache[cache_key]['price']
        
        try:
            async with aiohttp.ClientSession() as session:
                sources = [
                    "https://api.exchangerate-api.com/v4/latest/USD",
                    "https://api.coingecko.com/api/v3/simple/price?ids=usd&vs_currencies=rub",
                ]
                
                for url in sources:
                    try:
                        async with session.get(url, timeout=5) as response:
                            if response.status == 200:
                                data = await response.json()
                                rate = self._parse_exchange_rate(data)
                                if rate:
                                    self._set_cache(cache_key, rate)
                                    logger.info(f"üí∞ –ö—É—Ä—Å USD/RUB: {rate}")
                                    return rate
                    except:
                        continue
                
                rate = 95.0
                self._set_cache(cache_key, rate)
                return rate
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB: {e}")
            return 95.0
    
    def _parse_exchange_rate(self, data):
        if 'rates' in data and 'RUB' in data['rates']:
            return float(data['rates']['RUB'])
        elif 'usd' in data and 'rub' in data['usd']:
            return float(data['usd']['rub'])
        elif 'rub' in data:
            return float(data['rub'])
        return None
    
    async def get_crypto_price_coingecko(self, currency_id, target_currency):
        cache_key = f"coingecko_{currency_id}_{target_currency}"
        if self._is_cache_valid(cache_key):
            return price_cache[cache_key]['price']
        
        try:
            async with aiohttp.ClientSession() as session:
                url = f"https://api.coingecko.com/api/v3/simple/price?ids={currency_id}&vs_currencies={target_currency}"
                
                async with session.get(url, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        if currency_id in data and target_currency in data[currency_id]:
                            price = data[currency_id][target_currency]
                            self._set_cache(cache_key, price)
                            logger.info(f"‚úÖ CoinGecko: {currency_id} = {price} {target_currency}")
                            return price
        except Exception as e:
            logger.error(f"‚ùå CoinGecko –æ—à–∏–±–∫–∞: {e}")
        
        return None
    
    async def get_crypto_price_binance(self, currency_symbol, target_currency):
        cache_key = f"binance_{currency_symbol}_{target_currency}"
        if self._is_cache_valid(cache_key):
            return price_cache[cache_key]['price']
        
        try:
            symbol = BINANCE_SYMBOLS.get(currency_symbol)
            if not symbol:
                return None
            
            async with aiohttp.ClientSession() as session:
                url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
                
                async with session.get(url, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        usd_price = float(data['price'])
                        
                        if target_currency == "usd":
                            self._set_cache(cache_key, usd_price)
                            return usd_price
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã
                        if target_currency == "rub":
                            usd_to_rub = await self.get_usd_to_rub_rate()
                            rub_price = usd_price * usd_to_rub
                            self._set_cache(cache_key, rub_price)
                            logger.info(f"‚úÖ Binance: {currency_symbol} = {rub_price:.2f} RUB")
                            return rub_price
                        else:
                            rates = {"eur": 0.92, "kzt": 450.0, "uah": 38.0, "byn": 2.5}
                            if target_currency in rates:
                                converted_price = usd_price * rates[target_currency]
                                self._set_cache(cache_key, converted_price)
                                return converted_price
                            return usd_price
        except Exception as e:
            logger.error(f"‚ùå Binance –æ—à–∏–±–∫–∞: {e}")
        
        return None
    
    async def get_crypto_price(self, crypto, target_currency):
        currency_id = CRYPTO_CURRENCIES[crypto]
        target_currency_lower = target_currency.lower()
        
        # –ü—Ä–æ–±—É–µ–º CoinGecko
        price = await self.get_crypto_price_coingecko(currency_id, target_currency_lower)
        
        # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º Binance
        if price is None:
            price = await self.get_crypto_price_binance(crypto, target_currency_lower)
        
        return price
    
    def _is_cache_valid(self, cache_key):
        if cache_key in price_cache:
            cache_time = price_cache[cache_key]['timestamp']
            return datetime.now() - cache_time < CACHE_DURATION
        return False
    
    def _set_cache(self, cache_key, price):
        price_cache[cache_key] = {
            'price': price,
            'timestamp': datetime.now()
        }

class BotService:
    def __init__(self):
        self.db = Database()
        self.price_service = PriceService()
        self.texts = {
            'ru': self._get_russian_texts(),
            'en': self._get_english_texts()
        }
    
    def _get_russian_texts(self):
        return {
            'welcome': "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b>",
            'language_selected': "‚úÖ <b>–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π</b>",
            'language_changed': "‚úÖ <b>–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π</b>",
            'check_subscription': """
üì¢ <b>–ü–û–î–ü–ò–®–ò–¢–ï–°–¨ –ù–ê –ù–ê–® –ö–ê–ù–ê–õ</b>

–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.

–ö–∞–Ω–∞–ª: {channel}
""",
            'subscribe': "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
            'check': "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            'not_subscribed': "‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
            'main_menu': """
üéØ <b>CryptoPrice Monitor PRO</b>

<b>‚ö° –í–ê–® –õ–ò–ß–ù–´–ô –ö–†–ò–ü–¢–û-–¢–†–ï–ô–î–ï–†!</b>

üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</b>
‚Ä¢ –ö—É—Ä—Å—ã 50+ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
‚Ä¢ 6 –≤–∞–ª—é—Ç (RUB, USD, EUR, KZT, UAH, BYN)
‚Ä¢ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫

üéØ <b>–£–ú–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø</b>
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
‚Ä¢ –°–ø–∞–º –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏!

üí∞ <b>–í–´–ì–û–î–ù–´–ï –ü–û–ö–£–ü–ö–ò</b>
‚Ä¢ –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã
‚Ä¢ –ê–≤—Ç–æ-—Å—Ç–æ–ø –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫

üîß <b>–ü–†–û–°–¢–û–ô –ò–ù–¢–ï–†–§–ï–ô–°</b>
‚Ä¢ –†—É—Å—Å–∫–∏–π/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏
‚Ä¢ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üìà <b>–ù–ê–ß–ù–ò–¢–ï –ó–ê–†–ê–ë–ê–¢–´–í–ê–¢–¨ –£–ñ–ï –°–ï–ô–ß–ê–°!</b>
""",
            'setup_monitoring': "üìä –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            'my_subscriptions': "üìà –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", 
            'settings': "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            'no_subscriptions': "üì≠ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫</b>",
            'all_stopped': "üõë <b>–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!</b>",
            'choose_crypto': "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>",
            'loading': "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...",
            'back_menu': "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            'back_crypto': "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫—Ä–∏–ø—Ç—ã",
            'stop_all': "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏",
            'change_lang': "üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
            'settings_text': "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞.",
            'language_changed_settings': "‚úÖ <b>–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫."
        }
    
    def _get_english_texts(self):
        return {
            'welcome': "üåç <b>Choose language</b>",
            'language_selected': "‚úÖ <b>Language set: English</b>",
            'language_changed': "‚úÖ <b>Language successfully changed to English</b>",
            'check_subscription': """
üì¢ <b>SUBSCRIBE TO OUR CHANNEL</b>

To use the bot, you need to subscribe to our channel.

Channel: {channel}
""",
            'subscribe': "üì¢ Subscribe",
            'check': "‚úÖ Check subscription",
            'not_subscribed': "‚ùå You are not subscribed to the channel yet. Please subscribe and click 'Check subscription'.",
            'main_menu': """
üéØ <b>CryptoPrice Monitor PRO</b>

<b>‚ö° YOUR PERSONAL CRYPTO TRADER!</b>

üìä <b>Real-time Monitoring</b>
‚Ä¢ 50+ cryptocurrency rates
‚Ä¢ 6 currencies (RUB, USD, EUR, KZT, UAH, BYN)
‚Ä¢ Auto-update every 30 sec

üéØ <b>SMART NOTIFICATIONS</b>
‚Ä¢ Price target settings
‚Ä¢ Instant alerts
‚Ä¢ Spam when target reached!

üí∞ <b>PROFITABLE PURCHASES</b>
‚Ä¢ Don't miss price drops
‚Ä¢ Auto-stop when target reached
‚Ä¢ Your subscription history

üîß <b>SIMPLE INTERFACE</b>
‚Ä¢ Russian/English languages
‚Ä¢ Intuitive control
‚Ä¢ 24/7 support

üìà <b>START EARNING RIGHT NOW!</b>
""",
            'setup_monitoring': "üìä Setup Monitoring",
            'my_subscriptions': "üìà My Subscriptions",
            'settings': "‚öôÔ∏è Settings",
            'no_subscriptions': "üì≠ <b>No active subscriptions</b>",
            'all_stopped': "üõë <b>All subscriptions stopped!</b>",
            'choose_crypto': "üíé <b>Choose cryptocurrency to monitor:</b>",
            'loading': "üîÑ Loading...",
            'back_menu': "üîô Back to menu",
            'back_crypto': "üîô Back to crypto",
            'stop_all': "üõë Stop all subscriptions",
            'change_lang': "üåç Change language",
            'settings_text': "‚öôÔ∏è <b>Settings</b>\n\nHere you can change the bot language.",
            'language_changed_settings': "‚úÖ <b>Language successfully changed!</b>\n\nNow the bot will use the selected language."
        }
    
    def get_text(self, lang, key, **kwargs):
        text = self.texts[lang].get(key, key)
        if kwargs:
            text = text.format(**kwargs)
        return text
    
    async def check_subscription(self, user_id, bot):
        try:
            member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
            return member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def send_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, keyboard=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        try:
            if update.callback_query:
                # –ï—Å–ª–∏ —ç—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.message.edit_text(
                    text, 
                    reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None,
                    parse_mode='HTML'
                )
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await context.bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None,
                    parse_mode='HTML'
                )
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_photo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, keyboard):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º"""
        user_id = update.effective_user.id
        
        try:
            if update.callback_query:
                try:
                    await update.callback_query.message.delete()
                except:
                    pass
            
            await context.bot.send_photo(
                chat_id=user_id,
                photo=MAIN_PHOTO_URL,
                caption=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            # –§–æ–ª–±—ç–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await self.send_message(update, context, text, keyboard)
    
    async def show_language_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, source="start"):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        source: 'start' - –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, 'settings' - –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        """
        user_id = update.effective_user.id
        current_lang = self.db.get_user_language(user_id)
        
        text = "üåç <b>Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b>"
        
        if source == "settings":
            keyboard = [
                [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru_settings")],
                [InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en_settings")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if current_lang == 'ru' else "üîô Back", callback_data="settings")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
                [InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en")]
            ]
        
        await self.send_message(update, context, text, keyboard)
    
    async def show_subscription_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏"""
        user_id = update.effective_user.id
        lang = self.db.get_user_language(user_id)
        
        text = self.get_text(lang, 'check_subscription', channel=CHANNEL_USERNAME)
        keyboard = [
            [InlineKeyboardButton(self.get_text(lang, 'subscribe'), url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton(self.get_text(lang, 'check'), callback_data="check_subscription")]
        ]
        
        await self.send_message(update, context, text, keyboard)
    
    async def show_main_menu_with_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        lang = self.db.get_user_language(user_id)
        
        keyboard = [
            [InlineKeyboardButton(self.get_text(lang, 'setup_monitoring'), callback_data="setup_monitor")],
            [InlineKeyboardButton(self.get_text(lang, 'my_subscriptions'), callback_data="mystats")],
            [InlineKeyboardButton(self.get_text(lang, 'settings'), callback_data="settings")]
        ]
        
        text = self.get_text(lang, 'main_menu')
        await self.send_photo_message(update, context, text, keyboard)
    
    async def show_crypto_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        lang = self.db.get_user_language(user_id)
        
        keyboard = []
        crypto_list = list(CRYPTO_CURRENCIES.keys())
        
        for i in range(0, len(crypto_list), 2):
            row = []
            for crypto in crypto_list[i:i+2]:
                row.append(InlineKeyboardButton(f"üíé {crypto}", callback_data=f"select_crypto_{crypto}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton(self.get_text(lang, 'back_menu'), callback_data="main_menu")])
        
        text = self.get_text(lang, 'choose_crypto')
        await self.send_photo_message(update, context, text, keyboard)
    
    async def show_currency_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, crypto: str):
        user_id = update.effective_user.id
        lang = self.db.get_user_language(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
        price_tasks = [
            self.price_service.get_crypto_price(crypto, currency)
            for currency in TARGET_CURRENCIES.keys()
        ]
        prices = await asyncio.gather(*price_tasks)
        
        price_info = "\n".join([
            f"üíµ {currency}: {price:,.2f}" if price 
            else f"üíµ {currency}: {self.get_text(lang, 'loading')}"
            for currency, price in zip(TARGET_CURRENCIES.keys(), prices)
        ])
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç
        keyboard = []
        currency_list = list(TARGET_CURRENCIES.keys())
        
        for i in range(0, len(currency_list), 3):
            row = []
            for currency in currency_list[i:i+3]:
                row.append(InlineKeyboardButton(f"üíµ {currency}", callback_data=f"select_currency_{crypto}_{currency}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton(self.get_text(lang, 'back_crypto'), callback_data="setup_monitor")])
        
        text = f"""
üíé <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:</b> {crypto}

üìä <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:</b>
{price_info}

üíµ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</b>
""" if lang == 'ru' else f"""
üíé <b>Cryptocurrency:</b> {crypto}

üìä <b>Current prices:</b>
{price_info}

üíµ <b>Choose purchase currency:</b>
"""
        
        await self.send_photo_message(update, context, text, keyboard)
    
    async def ask_for_target_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE, crypto: str, currency: str):
        user_id = update.effective_user.id
        lang = self.db.get_user_language(user_id)
        
        context.user_data.update({
            'selected_crypto': crypto,
            'selected_currency': currency,
            'waiting_for_price': True
        })
        
        current_price = await self.price_service.get_crypto_price(crypto, currency)
        price_display = f"{current_price:,.2f} {currency}" if current_price else self.get_text(lang, 'loading')
        
        text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

üíé <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:</b> {crypto}
üíµ <b>–í–∞–ª—é—Ç–∞:</b> {currency}

üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {price_display}

üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –≤ {currency}:</b>
<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 180.50</i>
""" if lang == 'ru' else f"""
üéØ <b>Setup Monitoring</b>

üíé <b>Cryptocurrency:</b> {crypto}
üíµ <b>Currency:</b> {currency}

üí∞ <b>Current price:</b> {price_display}

üìù <b>Enter target price in {currency}:</b>
<i>Example: 180.50</i>
"""
        
        keyboard = [[InlineKeyboardButton(self.get_text(lang, 'back_crypto'), callback_data=f"select_crypto_{crypto}")]]
        await self.send_photo_message(update, context, text, keyboard)
    
    async def handle_price_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message or not context.user_data.get('waiting_for_price'):
            return
        
        user_id = update.effective_user.id
        lang = self.db.get_user_language(user_id)
        
        try:
            price = float(update.message.text.replace(',', '.'))
            crypto = context.user_data.get('selected_crypto')
            currency = context.user_data.get('selected_currency')
            
            if not crypto or not currency or price <= 0:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö")
                context.user_data.clear()
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            success = self.db.save_subscription(user_id, crypto, currency, price)
            
            if not success:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
                context.user_data.clear()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            current_price = await self.price_service.get_crypto_price(crypto, currency)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if lang == 'ru':
                status = "‚úÖ <b>–¶–ï–õ–¨ –£–ñ–ï –î–û–°–¢–ò–ì–ù–£–¢–ê!</b>" if current_price and current_price <= price else "‚è≥ <b>–û–∂–∏–¥–∞–µ–º –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã</b>"
                text = f"""
‚úÖ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>

üíé <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:</b> {crypto}
üíµ <b>–í–∞–ª—é—Ç–∞:</b> {currency}

{"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> " + f"{current_price:,.2f} {currency}" if current_price else ""}
üéØ <b>–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞:</b> {price:,.2f} {currency}

{status}
"""
            else:
                status = "‚úÖ <b>GOAL ALREADY REACHED!</b>" if current_price and current_price <= price else "‚è≥ <b>Waiting for price drop</b>"
                text = f"""
‚úÖ <b>Monitoring set up!</b>

üíé <b>Cryptocurrency:</b> {crypto}
üíµ <b>Currency:</b> {currency}

{"üí∞ <b>Current price:</b> " + f"{current_price:,.2f} {currency}" if current_price else ""}
üéØ <b>Target price:</b> {price:,.2f} {currency}

{status}
"""
            
            keyboard = [[InlineKeyboardButton(self.get_text(lang, 'back_menu'), callback_data="main_menu")]]
            await self.send_photo_message(update, context, text, keyboard)
            context.user_data.clear()
            
        except ValueError:
            error_msg = "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ" if lang == 'ru' else "‚ùå Enter a valid number"
            await update.message.reply_text(error_msg)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
bot_service = BotService()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logger.info(f"üåç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è {user_id}")
    await bot_service.show_language_selection(update, context, source="start")

async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if data.startswith("lang_"):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —è–∑—ã–∫
        if data.endswith("_settings"):
            # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            language = data.replace("_settings", "").split("_")[1]
            source = "settings"
        else:
            # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            language = data.split("_")[1]
            source = "start"
        
        logger.info(f"üåç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {language}, –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = bot_service.db.set_user_language(user_id, language)
        
        if success:
            lang = bot_service.db.get_user_language(user_id)
            
            if source == "settings":
                # –ï—Å–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                text = bot_service.get_text(lang, 'language_changed_settings')
                await query.message.edit_text(text, parse_mode='HTML')
                await asyncio.sleep(1)
                await show_settings(update, context)
            else:
                # –ï—Å–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
                text = bot_service.get_text(lang, 'language_selected')
                await query.message.edit_text(text, parse_mode='HTML')
                await asyncio.sleep(1)
                await bot_service.show_subscription_check(update, context)
        else:
            # –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
            error_text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            await query.message.edit_text(error_text, parse_mode='HTML')
        
    elif data == "check_subscription":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É")
        if await bot_service.check_subscription(user_id, context.bot):
            # –ü–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await bot_service.show_main_menu_with_photo(update, context)
        else:
            # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!"
            lang = bot_service.db.get_user_language(user_id)
            text = bot_service.get_text(lang, 'not_subscribed')
            await query.message.edit_text(text, parse_mode='HTML')
            
            # –ò —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç —á—Ç–æ –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            await asyncio.sleep(1)
            await bot_service.show_subscription_check(update, context)
            
    elif data == "main_menu":
        await bot_service.show_main_menu_with_photo(update, context)
    elif data == "setup_monitor":
        await bot_service.show_crypto_selection(update, context)
    elif data == "mystats":
        await show_subscriptions(update, context)
    elif data == "settings":
        await show_settings(update, context)
    elif data == "stop_all":
        await stop_all_subscriptions(update, context)
    elif data == "change_lang":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await bot_service.show_language_selection(update, context, source="settings")
    elif data.startswith("select_crypto_"):
        crypto = data.replace("select_crypto_", "")
        await bot_service.show_currency_selection(update, context, crypto)
    elif data.startswith("select_currency_"):
        parts = data.split("_")
        crypto = parts[2]
        currency = parts[3]
        await bot_service.ask_for_target_price(update, context, crypto, currency)

async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    lang = bot_service.db.get_user_language(user_id)
    
    subscriptions = bot_service.db.get_user_subscriptions(user_id)
    keyboard = [[InlineKeyboardButton(bot_service.get_text(lang, 'back_menu'), callback_data="main_menu")]]
    
    if not subscriptions:
        text = bot_service.get_text(lang, 'no_subscriptions')
        await bot_service.send_photo_message(update, context, text, keyboard)
        return
    
    keyboard.insert(0, [InlineKeyboardButton(bot_service.get_text(lang, 'stop_all'), callback_data="stop_all")])
    
    text = "üìä <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n" if lang == 'ru' else "üìä <b>Your active subscriptions:</b>\n\n"
    
    for crypto, currency, target_price in subscriptions:
        current_price = await bot_service.price_service.get_crypto_price(crypto, currency)
        
        if current_price:
            difference = current_price - target_price
            percentage = (difference / target_price) * 100
            
            if current_price <= target_price:
                status = "üü¢ <b>–¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!</b>" if lang == 'ru' else "üü¢ <b>TARGET REACHED!</b>"
            else:
                status = (f"üü° –û—Å—Ç–∞–ª–æ—Å—å: {difference:+,.2f} ({percentage:+.1f}%)" if lang == 'ru' 
                         else f"üü° Remaining: {difference:+,.2f} ({percentage:+.1f}%)")
            
            text += f"""üíé {crypto} ‚Üí üíµ {currency}
üéØ –¶–µ–ª—å: {target_price:,.2f} {currency}
üí∞ –°–µ–π—á–∞—Å: {current_price:,.2f} {currency}
{status}\n\n"""
        else:
            status = "‚ö™ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..." if lang == 'ru' else "‚ö™ Updating data..."
            text += f"""üíé {crypto} ‚Üí üíµ {currency}
üéØ –¶–µ–ª—å: {target_price:,.2f} {currency}
{status}\n\n"""
    
    await bot_service.send_photo_message(update, context, text, keyboard)

async def stop_all_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    lang = bot_service.db.get_user_language(user_id)
    
    bot_service.db.stop_all_subscriptions(user_id)
    
    keyboard = [[InlineKeyboardButton(bot_service.get_text(lang, 'back_menu'), callback_data="main_menu")]]
    text = bot_service.get_text(lang, 'all_stopped')
    await bot_service.send_photo_message(update, context, text, keyboard)

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    lang = bot_service.db.get_user_language(user_id)
    
    keyboard = [
        [InlineKeyboardButton(bot_service.get_text(lang, 'change_lang'), callback_data="change_lang")],
        [InlineKeyboardButton(bot_service.get_text(lang, 'back_menu'), callback_data="main_menu")]
    ]
    
    text = bot_service.get_text(lang, 'settings_text')
    await bot_service.send_photo_message(update, context, text, keyboard)

async def send_spam(context, user_id, crypto, currency, current_price, target_price):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await context.bot.get_chat(user_id)
        username = f"@{user.username}" if user.username else f"user_{user_id}"
        
        lang = bot_service.db.get_user_language(user_id)
        
        if lang == 'ru':
            main_text = f"""
üö®üö®üö® <b>–¶–ï–ù–ê –£–ü–ê–õ–ê!</b> üö®üö®üö®

üíé <b>{crypto}</b>
üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price:,.2f} {currency}
üéØ <b>–í–∞—à–∞ —Ü–µ–ª—å:</b> {target_price:,.2f} {currency}

üìâ <b>–¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ü–û–†–ê –ü–û–ö–£–ü–ê–¢–¨!</b> üí∞

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}
"""
            spam_messages = [
                f"üéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! {username}",
                f"üí∞ –ü–û–†–ê –ü–û–ö–£–ü–ê–¢–¨! {username}",
                f"üìâ –¶–ï–ù–ê –£–ü–ê–õ–ê –î–û –ù–£–ñ–ù–û–ì–û –£–†–û–í–ù–Ø! {username}",
                f"üö® –ù–ï –ü–†–û–°–ü–ò –°–í–û–ô –®–ê–ù–°! {username}",
                f"üíé –ò–î–ï–ê–õ–¨–ù–´–ô –ú–û–ú–ï–ù–¢ –î–õ–Ø –ü–û–ö–£–ü–ö–ò! {username}",
                f"üî• –¶–ï–ù–ê –ù–ò–ñ–ï –¢–í–û–ï–ì–û –¢–ê–†–ì–ï–¢–ê! {username}",
                f"üéä –ü–û–ó–î–†–ê–í–õ–Ø–Æ –° –í–´–ì–û–î–ù–û–ô –ü–û–ö–£–ü–ö–û–ô! {username}",
                f"‚ö° –£–°–ü–ï–ô –ö–£–ü–ò–¢–¨ –ü–û –í–´–ì–û–î–ù–û–ô –¶–ï–ù–ï! {username}",
                f"üí∏ –ù–ï –£–ü–£–°–¢–ò –°–í–û–ô –®–ê–ù–°! {username}",
                f"üöÄ –í–†–ï–ú–Ø –î–ï–ô–°–¢–í–û–í–ê–¢–¨! {username}",
                f"üìä –¶–ï–ù–ê –î–û–°–¢–ò–ì–õ–ê –¶–ï–õ–ò! {username}",
                f"üéØ –¢–í–û–ô –ú–û–ú–ï–ù–¢ –ù–ê–°–¢–ê–õ! {username}",
                f"üí∞ –í–´–ì–û–î–ù–ê–Ø –ü–û–ö–£–ü–ö–ê –ñ–î–ï–¢! {username}",
                f"üî• –ù–ï –ü–†–û–ü–£–°–¢–ò –ó–û–õ–û–¢–£–Æ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨! {username}",
                f"üéâ –ü–û–†–ê –í–•–û–î–ò–¢–¨ –í –°–î–ï–õ–ö–£! {username}"
            ]
        else:
            main_text = f"""
üö®üö®üö® <b>PRICE DROPPED!</b> üö®üö®üö®

üíé <b>{crypto}</b>
üí∞ <b>Current price:</b> {current_price:,.2f} {currency}
üéØ <b>Your target:</b> {target_price:,.2f} {currency}

üìâ <b>Price reached target level! TIME TO BUY!</b> üí∞

üë§ <b>User:</b> {username}
"""
            spam_messages = [
                f"üéØ TARGET REACHED! {username}",
                f"üí∞ TIME TO BUY! {username}",
                f"üìâ PRICE DROPPED TO TARGET LEVEL! {username}",
                f"üö® DON'T MISS YOUR CHANCE! {username}",
                f"üíé PERFECT TIME TO BUY! {username}",
                f"üî• PRICE BELOW YOUR TARGET! {username}",
                f"üéä CONGRATS ON PROFITABLE PURCHASE! {username}",
                f"‚ö° BUY AT A GOOD PRICE NOW! {username}",
                f"üí∏ DON'T MISS YOUR OPPORTUNITY! {username}",
                f"üöÄ TIME TO ACT! {username}",
                f"üìä PRICE REACHED TARGET! {username}",
                f"üéØ YOUR MOMENT HAS COME! {username}",
                f"üí∞ PROFITABLE PURCHASE AWAITS! {username}",
                f"üî• DON'T MISS THE GOLDEN OPPORTUNITY! {username}",
                f"üéâ TIME TO ENTER THE DEAL! {username}"
            ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(user_id, main_text, parse_mode='HTML')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 15 —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π
        for i, msg in enumerate(spam_messages[:15], 1):
            try:
                await context.bot.send_message(user_id, f"{msg} [{i}/15]")
                await asyncio.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è {i}: {e}")
                continue
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∞–º–∞
        bot_service.db.deactivate_subscription(user_id, crypto, currency)
        logger.info(f"‚úÖ –°–ø–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} ({user_id})")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_spam: {e}")

async def check_prices(context: ContextTypes.DEFAULT_TYPE):
    try:
        db = Database()
        subscriptions = []
        
        with sqlite3.connect('crypto_bot.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT user_id, crypto, currency, target_price FROM subscriptions WHERE is_active = 1')
            subscriptions = cursor.fetchall()
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫")
        
        for user_id, crypto, currency, target_price in subscriptions:
            current_price = await bot_service.price_service.get_crypto_price(crypto, currency)
            
            if current_price and current_price <= target_price:
                logger.info(f"üéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! {crypto}: {current_price} <= {target_price}")
                await send_spam(context, user_id, crypto, currency, current_price, target_price)
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_prices: {e}")

def main():
    # –¢–æ–∫–µ–Ω —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button_click))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot_service.handle_price_input))
    
    app.job_queue.run_repeating(check_prices, interval=30, first=10)
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    app.run_polling()

if __name__ == '__main__':
    main()
